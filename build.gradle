plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'ivy-publish'
    id 'com.gradle.plugin-publish' version '1.1.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = artifact_group
version = artifact_version

sourceCompatibility = JavaVersion.VERSION_18
targetCompatibility = JavaVersion.VERSION_18

gradlePlugin {
    website = 'https://github.com/vontikov/sbe-gradle-plugin/'
    vcsUrl = 'https://github.com/vontikov/sbe-gradle-plugin/'
    plugins {
        gradletestPlugin {
            id = 'com.github.vontikov.sbe-generator-plugin'
            displayName = 'Simple Binary Encoding plugin'
            description = 'Simple Binary Encoding plugin'
            tags.addAll('SBE', 'Simple Binary Encoding')
            implementationClass = 'com.github.vontikov.SbeGeneratorPlugin'
        }
    }
}

publishing {
    repositories {
        mavenLocal()
    }
}

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text =
                sourceSets.main.runtimeClasspath.join('\n')
    }
}

configurations {
    all*.exclude group: 'org.codehaus.groovy', module: 'groovy-all'
}

dependencies {
    testImplementation(platform('org.junit:junit-bom:5.10.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation 'org.hamcrest:hamcrest-library:2.2'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly files(createClasspathManifest)
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

clean.doFirst {
    delete "${rootDir}/src/test/resources/projects/generator/build/"
}

defaultTasks 'clean', 'build'
